require_relative "../utils/iostream.rb"
require_relative "../utils/arraystream.rb"

module Godot
    class ProjectSettings < Hash
        def self.parse(data)
            if (data.class != IOStream) then
                raise ArgumentError.new("Argument must be of type IOStream!");
            end

            if (data.read_i32() != 0x47464345) then
                raise ArgumentError.new("Magic dosnt match!");
            end

            entries = data.read_i32();
            puts("[dbg] entries = #{entries}") if (@verbose);
            data_entries = ProjectSettings.new();
            for i in 0 ... entries do
                key = data.read_bytes(data.read_i32());
    
                val_len = data.read_i32();
                val_data = data.read_bytes(val_len);
    
                begin
                    val = Godot::BinaryMarshall::decode_variant(val_data);
                    puts("[dbg] entry #{i} = key:\"#{key}\", val: #{val.inspect}") if (@verbose);
                    data_entries[key] = val;
                rescue Godot::BinaryMarshall::Error => e
                    puts "Warn: could not parse variant for key \"#{key}\" correctly: #{e}";
                    puts("[dbg] entry #{i} = key:\"#{key}\", val: ???") if (@verbose);
                end
            end

            return data_entries;
        end

        def decode!(output_param)
            if (output_param.class == String) then
                output = File.open(output_param, "wb");
            elsif (output_param.class == IO) then
                output = output_param;
            else
                raise ArgumentError.new("Argument #1 must be either a path or an IO object");
            end

            output.write("; Engine configuration file.\n");
            output.write("; It's best edited using the editor UI and not directly,\n");
            output.write("; since the parameters that go here are not all obvious.\n");
            output.write("; GENERATED BY pck_dump.rb\n");
            output.write("\nconfig_version=4\n\n");

            # first write all _global keys...
            for k,v in select { |k,v| k.start_with?("_global_") } do
                begin
                    val_str = Godot::TextMarshall::variant_to_str(v);
                    output.write("#{k}=#{val_str}\n")
                rescue Godot::TextMarshall::Error => e
                    puts "Warn: could not stringify variant correctly: #{e}";
                end
            end
            reject! { |k,v| k.start_with?("_global_") };

            # then all keys that are in a group
            myproc = -> (cat) { 
                _entries = select { |k,v| k.start_with?("#{cat}/") };
                if (_entries.size == 0) then
                    return;
                end
                output.write("\n[#{cat}]\n\n");
                for k,v in _entries do
                    begin
                        val_str = Godot::TextMarshall::variant_to_str(v);
                        output.write("#{k.gsub("#{cat}/", "")}=#{val_str}\n")
                    rescue Godot::TextMarshall::Error => e
                        puts "Warn: could not stringify variant correctly: #{e}";
                    end
                end
                reject! { |k,v| k.start_with?("#{cat}/") };
            }

            myproc.call("application");
            myproc.call("audio");
            myproc.call("editor");
            myproc.call("debug");
            myproc.call("compression");
            myproc.call("android");
            myproc.call("network");
            myproc.call("memory");
            myproc.call("logging");
            myproc.call("rendering");
            myproc.call("display");
            myproc.call("physics");
            myproc.call("input_devices");
            myproc.call("node");
            myproc.call("gui");
            myproc.call("layer_names");
            myproc.call("mono");
            myproc.call("locale");
            myproc.call("world");
            myproc.call("filesystem");

            if (self.size() != 0) then
                puts("Warn: unknown keys remaining: #{self.inspect}");
            end
        end
    end
end